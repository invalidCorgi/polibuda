unit NewtonCoefficientsAndValues;

interface

function DividedDiffencesExtended(n : Integer; x : TArray<Extended>; f : TArray<Extended>) : TArray<Extended>;
function NewtonCoefficientsExtended(n : Integer; x : TArray<Extended>; f : TArray<Extended>) : TArray<Extended>;
function

implementation

function DividedDiffencesExtended(n : Integer; x : TArray<Extended>; f : TArray<Extended>) : TArray<Extended>;
var i, j : Integer;
    tempArray : TArray<Extended>;

{for i:=n downto 1 do
    for j:=n downto n-i+1 do
      f[j]:=(f[j]-f[j-1]) / (x[j]-x[j-(n-i+1)]);}

begin

  SetLength(tempArray,Length(f));
  for i:=Low(f) to High(f) do
    tempArray[i]:=f[i];

  for j:=1 to n do
    for i:=0 to n-j do
      tempArray[i]:=(tempArray[i+1]-tempArray[i])/(x[i+j]-x[i]);

  Result:=tempArray;

end;

function NewtonCoefficientsExtended(n : Integer; x : TArray<Extended>; f : TArray<Extended>) : TArray<Extended>;
var i,j : Integer;
    tempArray : TArray<Extended>;

begin

  tempArray := DividedDiffencesExtended(n, x, f);

  for i:=1 to n do
    for j:=i downto 1 do
      tempArray[j]:=tempArray[j]-tempArray[j-1]*x[i];

  Result := tempArray;

end;
end.

