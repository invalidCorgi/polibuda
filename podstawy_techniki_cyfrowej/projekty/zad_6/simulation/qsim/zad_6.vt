// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/20/2017 01:29:30"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    zad_6
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module zad_6_vlg_sample_tst(
	clock_28,
	key,
	sw,
	sampler_tx
);
input  clock_28;
input [1:1] key;
input [0:3] sw;
output sampler_tx;

reg sample;
time current_time;
always @(clock_28 or key or sw)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module zad_6_vlg_check_tst (
	hex0,
	hex1,
	hex2,
	hex3,
	hex4,
	hex5,
	hex6,
	hex7,
	ledg,
	ledr,
	sampler_rx
);
input [0:6] hex0;
input [0:6] hex1;
input [0:6] hex2;
input [0:6] hex3;
input [0:6] hex4;
input [0:6] hex5;
input [0:6] hex6;
input [0:6] hex7;
input [0:0] ledg;
input [0:9] ledr;
input sampler_rx;

reg [0:6] hex0_expected;
reg [0:6] hex1_expected;
reg [0:6] hex2_expected;
reg [0:6] hex3_expected;
reg [0:6] hex4_expected;
reg [0:6] hex5_expected;
reg [0:6] hex6_expected;
reg [0:6] hex7_expected;
reg [0:0] ledg_expected;
reg [0:9] ledr_expected;

reg [0:6] hex0_prev;
reg [0:6] hex1_prev;
reg [0:6] hex2_prev;
reg [0:6] hex3_prev;
reg [0:6] hex4_prev;
reg [0:6] hex5_prev;
reg [0:6] hex6_prev;
reg [0:6] hex7_prev;
reg [0:0] ledg_prev;
reg [0:9] ledr_prev;

reg [0:0] ledg_expected_prev;
reg [0:9] ledr_expected_prev;

reg [0:0] last_ledg_exp;
reg [0:9] last_ledr_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:10] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 10'b1;
end

// update real /o prevs

always @(trigger)
begin
	hex0_prev = hex0;
	hex1_prev = hex1;
	hex2_prev = hex2;
	hex3_prev = hex3;
	hex4_prev = hex4;
	hex5_prev = hex5;
	hex6_prev = hex6;
	hex7_prev = hex7;
	ledg_prev = ledg;
	ledr_prev = ledr;
end

// update expected /o prevs

always @(trigger)
begin
	ledg_expected_prev = ledg_expected;
	ledr_expected_prev = ledr_expected;
end



// expected ledg[0]
initial
begin
	ledg_expected[0] = 1'bX;
end 

// expected ledr[0]
initial
begin
	ledr_expected[0] = 1'bX;
end 

// expected ledr[1]
initial
begin
	ledr_expected[1] = 1'bX;
end 

// expected ledr[2]
initial
begin
	ledr_expected[2] = 1'bX;
end 

// expected ledr[3]
initial
begin
	ledr_expected[3] = 1'bX;
end 

// expected ledr[4]
initial
begin
	ledr_expected[4] = 1'bX;
end 

// expected ledr[5]
initial
begin
	ledr_expected[5] = 1'bX;
end 

// expected ledr[6]
initial
begin
	ledr_expected[6] = 1'bX;
end 

// expected ledr[7]
initial
begin
	ledr_expected[7] = 1'bX;
end 

// expected ledr[8]
initial
begin
	ledr_expected[8] = 1'bX;
end 

// expected ledr[9]
initial
begin
	ledr_expected[9] = 1'bX;
end 
// generate trigger
always @(hex0_expected or hex0 or hex1_expected or hex1 or hex2_expected or hex2 or hex3_expected or hex3 or hex4_expected or hex4 or hex5_expected or hex5 or hex6_expected or hex6 or hex7_expected or hex7 or ledg_expected or ledg or ledr_expected or ledr)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected hex0 = %b | expected hex1 = %b | expected hex2 = %b | expected hex3 = %b | expected hex4 = %b | expected hex5 = %b | expected hex6 = %b | expected hex7 = %b | expected ledg = %b | expected ledr = %b | ",hex0_expected_prev,hex1_expected_prev,hex2_expected_prev,hex3_expected_prev,hex4_expected_prev,hex5_expected_prev,hex6_expected_prev,hex7_expected_prev,ledg_expected_prev,ledr_expected_prev);
	$display("| real hex0 = %b | real hex1 = %b | real hex2 = %b | real hex3 = %b | real hex4 = %b | real hex5 = %b | real hex6 = %b | real hex7 = %b | real ledg = %b | real ledr = %b | ",hex0_prev,hex1_prev,hex2_prev,hex3_prev,hex4_prev,hex5_prev,hex6_prev,hex7_prev,ledg_prev,ledr_prev);
`endif
	if (
		( ledg_expected_prev !== 1'bx ) && ( ledg_prev !== ledg_expected_prev )
		&& ((ledg_expected_prev !== last_ledg_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledg :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledg_expected_prev);
		$display ("     Real value = %b", ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_ledg_exp = ledg_expected_prev;
	end
	if (
		( ledr_expected_prev[0] !== 1'bx ) && ( ledr_prev[0] !== ledr_expected_prev[0] )
		&& ((ledr_expected_prev[0] !== last_ledr_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledr_expected_prev);
		$display ("     Real value = %b", ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ledr_exp[0] = ledr_expected_prev[0];
	end
	if (
		( ledr_expected_prev[1] !== 1'bx ) && ( ledr_prev[1] !== ledr_expected_prev[1] )
		&& ((ledr_expected_prev[1] !== last_ledr_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledr_expected_prev);
		$display ("     Real value = %b", ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ledr_exp[1] = ledr_expected_prev[1];
	end
	if (
		( ledr_expected_prev[2] !== 1'bx ) && ( ledr_prev[2] !== ledr_expected_prev[2] )
		&& ((ledr_expected_prev[2] !== last_ledr_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledr_expected_prev);
		$display ("     Real value = %b", ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ledr_exp[2] = ledr_expected_prev[2];
	end
	if (
		( ledr_expected_prev[3] !== 1'bx ) && ( ledr_prev[3] !== ledr_expected_prev[3] )
		&& ((ledr_expected_prev[3] !== last_ledr_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledr_expected_prev);
		$display ("     Real value = %b", ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ledr_exp[3] = ledr_expected_prev[3];
	end
	if (
		( ledr_expected_prev[4] !== 1'bx ) && ( ledr_prev[4] !== ledr_expected_prev[4] )
		&& ((ledr_expected_prev[4] !== last_ledr_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledr[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledr_expected_prev);
		$display ("     Real value = %b", ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ledr_exp[4] = ledr_expected_prev[4];
	end
	if (
		( ledr_expected_prev[5] !== 1'bx ) && ( ledr_prev[5] !== ledr_expected_prev[5] )
		&& ((ledr_expected_prev[5] !== last_ledr_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledr[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledr_expected_prev);
		$display ("     Real value = %b", ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ledr_exp[5] = ledr_expected_prev[5];
	end
	if (
		( ledr_expected_prev[6] !== 1'bx ) && ( ledr_prev[6] !== ledr_expected_prev[6] )
		&& ((ledr_expected_prev[6] !== last_ledr_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledr[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledr_expected_prev);
		$display ("     Real value = %b", ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ledr_exp[6] = ledr_expected_prev[6];
	end
	if (
		( ledr_expected_prev[7] !== 1'bx ) && ( ledr_prev[7] !== ledr_expected_prev[7] )
		&& ((ledr_expected_prev[7] !== last_ledr_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledr[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledr_expected_prev);
		$display ("     Real value = %b", ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ledr_exp[7] = ledr_expected_prev[7];
	end
	if (
		( ledr_expected_prev[8] !== 1'bx ) && ( ledr_prev[8] !== ledr_expected_prev[8] )
		&& ((ledr_expected_prev[8] !== last_ledr_exp[8]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledr[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledr_expected_prev);
		$display ("     Real value = %b", ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ledr_exp[8] = ledr_expected_prev[8];
	end
	if (
		( ledr_expected_prev[9] !== 1'bx ) && ( ledr_prev[9] !== ledr_expected_prev[9] )
		&& ((ledr_expected_prev[9] !== last_ledr_exp[9]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledr[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledr_expected_prev);
		$display ("     Real value = %b", ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ledr_exp[9] = ledr_expected_prev[9];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module zad_6_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock_28;
reg [1:1] key;
reg [0:3] sw;
// wires                                               
wire [0:6] hex0;
wire [0:6] hex1;
wire [0:6] hex2;
wire [0:6] hex3;
wire [0:6] hex4;
wire [0:6] hex5;
wire [0:6] hex6;
wire [0:6] hex7;
wire [0:0] ledg;
wire [0:9] ledr;

wire sampler;                             

// assign statements (if any)                          
zad_6 i1 (
// port map - connection between master ports and signals/registers   
	.clock_28(clock_28),
	.hex0(hex0),
	.hex1(hex1),
	.hex2(hex2),
	.hex3(hex3),
	.hex4(hex4),
	.hex5(hex5),
	.hex6(hex6),
	.hex7(hex7),
	.key(key),
	.ledg(ledg),
	.ledr(ledr),
	.sw(sw)
);

// clock_28
always
begin
	clock_28 = 1'b0;
	clock_28 = #10000 1'b1;
	#10000;
end 

// key[1]
initial
begin
	key[1] = 1'b1;
	key[1] = #10000 1'b0;
	key[1] = #10000 1'b1;
end 

// sw[0]
initial
begin
	sw[0] = 1'b1;
end 

// sw[1]
initial
begin
	sw[1] = 1'b0;
end 

// sw[2]
initial
begin
	sw[2] = 1'b0;
end 

// sw[3]
initial
begin
	sw[3] = 1'b0;
end 

zad_6_vlg_sample_tst tb_sample (
	.clock_28(clock_28),
	.key(key),
	.sw(sw),
	.sampler_tx(sampler)
);

zad_6_vlg_check_tst tb_out(
	.hex0(hex0),
	.hex1(hex1),
	.hex2(hex2),
	.hex3(hex3),
	.hex4(hex4),
	.hex5(hex5),
	.hex6(hex6),
	.hex7(hex7),
	.ledg(ledg),
	.ledr(ledr),
	.sampler_rx(sampler)
);
endmodule

